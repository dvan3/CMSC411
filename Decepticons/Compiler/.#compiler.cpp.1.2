#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
using namespace std;
int main(int argc, char * argv[]){

  if(argc != 2){
    cout << "Syntax error: usage ./compile <filename>" << endl;
  }
  
  map<string,unsigned int> opCode;
  opCode["NOOP"] = 0;
  opCode["SET_R"] = 1;
  opCode["SET_I"] = 2;
  opCode["ADD_R"] = 3;
  opCode["ADD_I"] = 4;
  opCode["SUB_R"] = 5;
  opCode["SUB_I"] = 6;
  opCode["MUL_R"] = 7;
  opCode["MUL_I"] = 8;
  opCode["DIV_R"] = 9;
  opCode["DIV_I"] = 10;
  opCode["STORE_R"] = 11;
  opCode["STORE_I"] = 12;
  opCode["LOAD_R"] = 13;
  opCode["LOAD_I"] = 14;
  opCode["BEQ_R"] = 15;
  opCode["BLT_R"] = 16;
  opCode["JMP_R"] = 17;
  opCode["JMP_I"] = 18;
  opCode["DRIVE_R"] = 19;
  opCode["DRIVE_I"] = 20;
  opCode["TURN_R"] = 21;
  opCode["TURN_I"] = 22;
  opCode["FIRE_R"] = 23;
  opCode["FIRE_I"] = 24;
  opCode["SCAN"] = 25;

  map<string, unsigned int> registerMap;
  registerMap["PC"] = 0;
  registerMap["OP1"] = 1;
  registerMap["OP2"] = 2;
  registerMap["RESULT"] = 3;
  registerMap["SCANRANGE"] = 4;
  registerMap["FIRERANGE"] = 5;
  registerMap["DRIVESPEED"] = 6;
  registerMap["TURNSPEED"] = 7;
  registerMap["R0"] = 8;
  registerMap["R1"] = 9;
  registerMap["R2"] = 10;
  registerMap["R3"] = 11;
  registerMap["R4"] = 12;
  registerMap["R5"] = 13;
  registerMap["R6"] = 14;
  registerMap["R7"] = 15;
  registerMap["N_REGISTERS"] = 16;

  ifstream aiFile;

  aiFile.open(argv[1]);

  if(aiFile.is_open()){
     cerr << "AI file loaded" << endl;

     string instruction, value;	

     while(getline(aiFile,instruction)){
	
	std::stringstream line(instruction);

	cout << "Instruction: " <<  instruction << endl;

	string operation, reg, immediate, target;

	line >> operation >> target >> reg >> immediate;

	//DEBUGGING
	cout << "Operation : " <<  operation << endl;
	cout << "Register 1 / Immediate: " << reg << endl;
	cout << "Register 2 / Immediate: " << immediate << endl;
	cout << "Output: " << target << endl;
	cout << "opcode[operation] = " << opCode[operation] << endl;

	target = target.substr(2,target.length() -3);
	cout << "Circumsized target : " << target << endl;

	if(reg[0] == '$'){
	    reg = reg.substr(2,reg.length() - 3);
	    cout << "Circumsized reg : " << reg << endl;
	}
	switch(opCode[operation]){
	   case 0: //NOOP
	      cout << "NOOP" << endl;
	      break;
	      
	   case 1: //SET_R
	      cout << "SET_R" << endl;
	      break;
	      
	   case 2: //SET_I
	      cout << "SET_I" << endl;
	      break;

	   case 3: //ADD_R
	      cout << "ADD_R" << endl;
	      break;

	   case 4: //ADD_I
	      cout << "ADD_I" << endl;
	      break;

	   case 5: //SUB_R
              cout << "SUB_R" << endl;
              break;
	      
	   case 6: //SUB_I
              cout << "SUB_I" << endl;
              break;

	   case 7: //MUL_R
              cout << "MUL_R" << endl;
              break;

	   case 8: //MUL_I
              cout << "MUL_I" << endl;
              break;

	   case 9: //DIV_R
              cout << "DIV_R" << endl;
              break;

	   case 10: //DIV_I
              cout << "DIV_I" << endl;
              break;

	   case 11: //STORE_R
              cout << "STORE_R" << endl;
              break;

	   case 12: //STORE_I
              cout << "STORE_I" << endl;
              break;

	   case 13: //LOAD_R
              cout << "LOAD_R" << endl;
              break;

	   case 14: //LOAD_I
              cout << "LOAD_I" << endl;
              break;

	   case 15: //BEQ_R
              cout << "BEQ_R" << endl;
              break;

	   case 16: //BLT_R
              cout << "BLT_R" << endl;
              break;

	   case 17: //JMP_R
              cout << "JMP_R" << endl;
              break;

	   case 18: //JMP_I
              cout << "JMP_I" << endl;
              break;

	   case 19: //DRIVE_R
              cout << "DRIVE_R" << endl;
              break;

	   case 20: //DRIVE_I
              cout << "DRIVE_I" << endl;
              break;

	   case 21: //TURN_R
              cout << "TURN_R" << endl;
              break;

	   case 22: //TURN_I
              cout << "TURN_I" << endl;
              break;

	   case 23: //FIRE_R
              cout << "FIRE_R" << endl;
              break;

	   case 24: //FIRE_I
              cout << "FIRE_I" << endl;
              break;

	   case 25: //SCAN
              cout << "SCAN" << endl;
              break;


	   default:
	      cerr << "DEFAULT" << endl;
	      break;	      
	}	
     }
  }else{
     
     cerr << "Failed to open ai.txt" << endl;
  }  	
  return 1;
}

